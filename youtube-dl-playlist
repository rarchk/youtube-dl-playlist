#!/usr/bin/env python
# youtube-dl-playlist
# 
# Utility to download Youtube playlist videos.
# 
# @author Jordon Mears <jordoncm at gmail dot com>
# @license LGPL version 2 or greater <http://www.gnu.org/licenses/lgpl.html>

import sys
import urllib
import urllib2
import httplib
import json
import os
import shutil
import tempfile
import glob


class PlaylistDownloader:
    targetDir = ''
    totalVideos = 0
    downloaded = 0

    def setTarget(self, target):
	#print sys._getframe().f_code.co_name
        self.targetDir = os.path.realpath(target) + '/';
        return self.targetDir;

    def download(self, playlistId):
        print 'Getting playlist information ... '
	#print sys._getframe().f_code.co_name
        
	data = self.fetchInfo(playlistId)
        self.totalVideos = int(data['feed']['openSearch$totalResults']['$t'])
        print 'Total videos to download: ' + str(self.totalVideos)

        playlistDir = self.createPath(self.targetDir, data['feed']['title']['$t']);
        os.chdir(self.setTarget(playlistDir))

        self.downloaded = 1;
	#if 1:
        while(self.downloaded <= self.totalVideos):
	    print self.downloaded
	    if (self.downloaded + 50 > self.totalVideos):
 	           data = self.fetchInfo(playlistId, self.downloaded, self.totalVideos-self.downloaded);
	    else:	   
            	   data = self.fetchInfo(playlistId, self.downloaded, 50)
	    #print data['feed']['entry']
            self.downloadEntires(data['feed']['entry'])

    def downloadEntires(self, entries):
	#print sys._getframe().f_code.co_name
        for entry in entries:
            group = entry['media$group'];
            if self.downloadEntry(group['yt$videoid']['$t'], group['media$title']['$t']):
                self.downloaded = self.downloaded + 1
            print

    def downloadEntry(self, ytId, ytTitle):
	#print sys._getframe().f_code.co_name
        #print ytId + '(' + str(self.downloaded).zfill(3) + '):', ytTitle, '...'

        existing = glob.glob('*' + ytId + '.*');
        filtered = [x for x in existing if not x.endswith('part')]
        if filtered.__len__() > 0:
           # print 'alreary exists, skipping...'
            return True

        try:
            os.system('youtube-dl  -t --audio-format=best http://www.youtube.com/watch?v=' + ytId)
            return True

        except KeyboardInterrupt:
            sys.exit(1)
        
        except Exception as e:
            print 'failed: ', e.strerror
            return False

    def fetchInfo(self, playlistId, start = 1, limit = 0):
	#print sys._getframe().f_code.co_name
	url= "http://gdata.youtube.com/feeds/api/playlists/"+ str(playlistId) + '/?';
	url=url+ urllib.urlencode({'alt' : 'json','max-results' :limit,'start-index' : start,'v' : 2});
	try:
		req=urllib2.Request(url,headers={'User-Agent' : "Magic Browser"});
		response = urllib2.urlopen(req);
	except urllib2.HTTPError, e:
		print e.fp.read();
	if response.getcode() != 200:
		print 'Error: Not a valid/public playlist.'
		sys.exit(1)

	data = response.read()
	response.close()
	#print data
	data = json.loads(data)
	return data

    def createPath(self, path, title):
	#print sys._getframe().f_code.co_name
        title = title.replace('/', '')
        number = ''

        if os.path.exists(path + title) == True and os.path.isdir(path + title) == False:
            while(os.path.exists(path + title + str(number)) == True and os.path.isdir(path + title + str(number)) == False):
                if number == '':
                    number = 0

                number = number + 1

        if os.path.exists(path + title + str(number)) == False:
            os.mkdir(path + title + str(number))

        return path + title + str(number)



if __name__ == '__main__':
    if len(sys.argv) < 2:
        print 'Usage: youtube-dl-playlist PLAYLIST_ID [DESTINATION_PATH]'
        sys.exit(1)
    else:
        if sys.argv[1][0] == 'P' and sys.argv[1][1] == 'L':
            PLAYLIST_ID = sys.argv[1][2:]
        else:
            PLAYLIST_ID = sys.argv[1]
    downloader = PlaylistDownloader()
    if len(sys.argv) == 3:
        downloader.setTarget(sys.argv[2] + '/')
    else:
        downloader.setTarget('./')
    downloader.download(PLAYLIST_ID);
